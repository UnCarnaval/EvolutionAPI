FROM node:20-alpine AS builder

# Install dependencies for building
RUN apk add --no-cache git python3 make g++

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY tsup.config.ts ./

# Install dependencies
RUN npm ci --only=production --silent

# Copy source code
COPY src ./src
COPY prisma ./prisma
COPY public ./public
COPY manager ./manager
COPY runWithProvider.js ./
COPY health-check.js ./
COPY simple-test.js ./

# Generate Prisma client
RUN npx prisma generate --schema ./prisma/postgresql-schema.prisma

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    tzdata \
    ffmpeg \
    bash \
    openssl \
    curl

# Set timezone
ENV TZ=UTC

# Create app directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S evolution -u 1001

# Copy built application
COPY --from=builder --chown=evolution:nodejs /app/dist ./dist
COPY --from=builder --chown=evolution:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=evolution:nodejs /app/prisma ./prisma
COPY --from=builder --chown=evolution:nodejs /app/manager ./manager
COPY --from=builder --chown=evolution:nodejs /app/public ./public
COPY --from=builder --chown=evolution:nodejs /app/runWithProvider.js ./runWithProvider.js
COPY --from=builder --chown=evolution:nodejs /app/package.json ./package.json
COPY --from=builder --chown=evolution:nodejs /app/health-check.js ./health-check.js
COPY --from=builder --chown=evolution:nodejs /app/simple-test.js ./simple-test.js

# Create uploads directory
RUN mkdir -p uploads sessions && chown -R evolution:nodejs uploads sessions

# Switch to non-root user
USER evolution

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

# Start the application
CMD ["npm", "run", "start:prod"]
